name: Linux

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

jobs:
  build:
    if: ${{!contains(github.event.pull_request.title, 'skip-ci') && !contains(github.event.head_commit.message, 'skip-ci')}}
    strategy:
      matrix:
        build_type: [ Release ]
        os: [ubuntu-22.04]
        compiler:
          - cc: cc
            cxx: c++

    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ${{ matrix.os }}

    env:
      CC: ${{ matrix.compiler.cc }}
      CXX: ${{ matrix.compiler.cxx }}
      LLVM_VERSION: 17.0.2

    steps:
    - uses: actions/checkout@v3

    - name: Install conan
      run: pip3 install conan

    - name: Restore Conan Cache
      id: cache-conan
      uses: actions/cache/restore@v3
      with:
        path: ~/.conan2/p/
        key: ${{ runner.os }}-${{ runner.arch }}-cppsafe-conan-${{ env.LLVM_VERSION }}

    - name: Install llvm
      working-directory: conan
      if: steps.cache-conan.outputs.cache-hit != 'true'
      run: conan export --name=llvm --version=${{ env.LLVM_VERSION }} .

    - name: Configure CMake
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}

    - name: Save Conan Cache
      uses: actions/cache/save@v3
      if: steps.cache-conan.outputs.cache-hit != 'true'
      with:
        path: ~/.conan2/p/
        key: ${{ steps.cache-conan.outputs.cache-primary-key }}

    - name: Build
      run: cmake --build ${{github.workspace}}/build --config ${{ matrix.build_type }} -j

    - name: Test
      working-directory: integration_test
      run: bash run_tests.sh
